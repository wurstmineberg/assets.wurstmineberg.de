Fields in items.json:

Items are entered by their name IDs. All items from a plugin are in one object, for example minecraft:coal is at the key path .minecraft.coal

The fields for the damage values and block info implicitely inherit the values of the parent

* name: display name of the item
* subtype: specific rendering subtype like "sapling" or something if needed
    * slab: will take the top half of the block and render it at the bottom
    * slabTop: will only render the top half
    * stairs: renders stairs
    * stairs@[rotation]: renders stairs rotated by
* solid: true if the block is solid and nontransparent, defaults to true
* image: a link to a prerendered image of the item or block
* texture: The default texture for all sides.
        * The value can be appended with @[0-10] (like "dirt@3") which specifies the flip and rotation that should be applied to the block prior to rendering it.
            * 0: no rotation (default)
            * 1: rotate 90° right
            * 2: rotate 180° right
            * 3: rotate 270° right
            * 4: flip horizontally
            * 5: flip horizontally and rotate 90° right
            * 6: flip horizontally and rotate 180° right (vertical flip)
            * 7: flip horizontally and rotate 270° right
        * The texture files are applied top = top for the sides and north for top and bottom
    * textureSnow: the default texture if the top is covered by snow (currently only used by grass)
    * textureTop: the texture for the top
    * textureBottom: the texture for the bottom
    * textureSide: the texture used for the sides (nswe) of the block
        * textureNorth: the texture for the north
        * textureSouth: the texture for the south
        * textureWest: the texture for the west
        * textureEast: the texture for the east
    * textureNeedsColorisation: true if at least part of the textures need colorisation
    * texture*Uncolored: uncolored textures have the …Uncolored suffix
* colorMap: the color map for colorisation
* renderType: Can be either of:
    * solid (default): Will render the block with the textures to the side of the block
    * cross: Will render the block with the texture forming a cross meeting in the middle
    * square: Will render the block as a square crossing at the four corners, like wheat
* cloud: The id of the Cloud chest with the item in it
    * x: The corridor. 0 is the central corridor, 1 is the corridor to the left, -2 is the second corridor to the right.
    * y: The floor. 1 is the first underground floor.
    * z: The chest number. 0 is the first chest to the left, 1 the first to the right, 2 the second to the left, etc.
* blockID: The numeric block id
* itemID: The numeric item id. Same as the block id for blocks that can also be items. If this field is missing or null, the item cannot be obtained even with cheats.
* damageValues: damage values of the item, with the fields that differ from the default
* blockInfo: fields whose values for the block differ from those of the item
* obtaining: an array of “method of obtaining” objects. These contain information on obtaining items and blocks. Methods of obtaining common to all blocks or items, such as placing a block or throwing an item on the ground and picking it back up, are not included. A method of obtaining has a type, which is a required field, and other fields depending on the type. The following types are defined:
    * craftingShaped: the item can be crafted with a shaped recipe.
        * recipe: an array of 9 item stubs, listed in ltr rows from top to bottom. An item stub may be a string containing the new-style item ID, null for an empty crafting square, or an object with the following keys:
            * id: the new-style item ID.
            * damage: the damage value, or an array of allowed damage values. Defaults to all damage values.
            * consumed: whether or not the item is consumed during the crafting process. Defaults to true. May also be an item stub specifying which item it turns into after crafting.
            * amount: the amount of items required, used for the "trading" method type.
        * outputAmount: the number of items created by crafting once. Defaults to 1.
    * craftingShapeless: the item can be crafted with a shapeless recipe.
        * recipe: an array of 1 to 9 item stubs specifying the input items.
        * outputAmount: the number of items created by crafting once. Defaults to 1.
    * smelting: the item can be smelted in a furnace.
        * input: an item stub specifying the smelting ingredient.
    * entityDeath: the item is dropped by an entity upon death.
        * entity: the entity's savegame ID.
        * amountMin: the minimum number of items dropped by a single entity. Defaults to 1.
        * amountMax: the maximum number of items dropped by a single entity. Defaults to 1.
        * requiresPlayerKill: if true, the item is only dropped when the entity is killed by a player. Defaults to false.
    * mining: the item is dropped when a block is mined.
        * block: an item stub specifying the block that drops the item.
        * amountMin: the minimum number of items dropped from a single block. Defaults to 1.
        * amountMax: the maximum number of items dropped from a single block. Defaults to 1.
        * tools: an array of item stubs specifying the tools with which this method of obtaining works, or null for no tool. Defaults to all tools.
        * excludeTools: if true, this method of obtaining works with tools other than those in the tools array. Defaults to false.
        * silkTouch: whether or not the Silk Touch enchantment should be used. The default, null, means that it works with or without Silk Touch.
    * structure: the block generates naturally as part of a structure.
        * amount: how many of the block will typically generate as part of a single structure. If not given, it varies.
        * structure: the structure ID as used in structures.json
    * trading: the item can be bought from a testificate.
        * profession: the villager type ID, determining their appearance. For example, 0 for farmers.
        * career: the villager subtype ID, determining their trades. For example, 2 for fishermen (profession 0) or weapon smiths (profession 3).
        * tier: the tier at which the trade is unlocked. Defaults to 0, meaning that the villager starts with this trade already unlocked.
        * price: an item stub specifying the maximum amount of items that must be sold, or a number if the price is in emeralds.
        * priceMin: an item stub specifying the minimum amount of items that must be sold, or a number if the price is in emeralds. Defaults to the same as the maximum price.
        * additionalPrice: an item stub specifying the maximum amount of items that must be sold in the second stack. Defaults to null, meaning no items.
        * additionalPriceMin: an item stub specifying the minimum amount of items that must be sold in the second stack. Defaults to the same as the maximum additional price.
        * outputAmount: the number of items obtained by trading once. Defaults to 1.
    * bonusChest: the item may generate in the bonus chest, depending on the world seed.
        * amountMin: the minimum number of items in a single generated stack. Defaults to 1.
        * amountMax: the maximum number of items in a single generated stack. Defaults to 1.
        * stacksMin: the minimum number of total stacks generated in the bonus chest.
        * stacksMax: the maximum number of total stacks generated in the bonus chest.
        * weight: the chance that a generated stack will have this item.
    * chest: the item may appear in chests or other inventories generated naturally with structures in the world.
        * amountMin: the minimum number of items in a single generated stack. Defaults to 1.
        * amountMax: the maximum number of items in a single generated stack. Defaults to 1.
        * stacksMin: the minimum number of total stacks generated in the chest.
        * stacksMax: the maximum number of total stacks generated in the chest.
        * weight: the chance that a generated stack will have this item.
        * structure: the structure ID as used in structres.json
        * inventoryType: a human-readable version of the type of inventory in plural (e.g. “dispensers” or “library chests”). Defaults to “chests”.
* dropsSelf: an array of objects structured like “method of obtaining: mining” objects, except without the “block” key. This is used to specify how the block must be mined so that it drops itself. The default is true, implying that the block always drops itself.
* durability: the durability of the tool, as displayed in-game.
* stackable: how many of this item, given that they are identical, may be stacked together. May be true or omitted for stackable (64), false for unstackable (1), or another positive integer for a custom value.
