Fields in items.json:

Items are entered by their name IDs. All items from a plugin are in one object, for example minecraft:coal is at the key path .minecraft.coal

The fields for the damage values, status effects, and tag variants implicitly inherit the values of the parent.

* name: display name of the item.
* solid: true if the block is solid and nontransparent, defaults to true
* image: the filename of a prerendered image of the item or block, relative to the img/grid directory in this repository.
* blockID: The numeric block id.
* itemID: The numeric item id. Same as the block id for blocks that can also be items. If this field is missing or null, the item cannot be obtained even with cheats.
* damageValues: damage values of the item, with the fields that differ from the default.
* effects: variations of the item with status effects, with the fields that differ from the default.
* tagPath: an array describing a key path from the item's "tag" tag to the NBT tag name for which the tagVariants field defines item variants.
* tagVariants: an object mapping possible values (converted to strings) of the NBT tag specified by the tagPath field to variants of the item, with the fields that differ from the default. A variant without the tag is represented using the empty string as its key.
* obtaining: an array of “method of obtaining” objects. These contain information on obtaining items and blocks. Methods of obtaining common to all blocks or items, such as placing a block or throwing an item on the ground and picking it back up, are not included. A method of obtaining has a type, which is a required field, and other fields depending on the type. The following types are defined:
    * craftingShaped: the item can be crafted with a shaped recipe.
        * recipe: an array of 9 item stubs, listed in ltr rows from top to bottom. An item stub may be a string containing the new-style item ID, null for an empty crafting square, or an object with the following keys:
            * id: the new-style item ID.
            * damage: the damage value, or an array of allowed damage values. Defaults to all damage values.
            * effect: the new-style status effect ID, or an array of allowed effect IDs. Defaults to any or no effect.
            * tagValue: the value of the required NBT tag (as specified by tagPath in the item info), or null for no value. Defaults to any or no value.
            * consumed: whether or not the item is consumed during the crafting process. Defaults to true. May also be an item stub specifying which item it turns into after crafting.
            * amount: the amount of items required, used for the "trading" method type.
        * outputAmount: the number of items created by crafting once. Defaults to 1.
    * craftingShapeless: the item can be crafted with a shapeless recipe.
        * recipe: an array of 1 to 9 item stubs specifying the input items.
        * outputAmount: the number of items created by crafting once. Defaults to 1.
    * smelting: the item can be smelted in a furnace.
        * input: an item stub specifying the smelting ingredient.
    * entityDeath: the item is dropped by an entity upon death.
        * entity: the entity's savegame ID.
        * amountMin: the minimum number of items dropped by a single entity when killed without the Looting enchantment. Defaults to 1.
        * amountMax: the maximum number of items dropped by a single entity when killed without the Looting enchantment. Defaults to 1.
        * amountMinLooting: the minimum number of items dropped by a single entity when killed with Looting III. Defaults to the same value as amountMin.
        * amountMaxLooting: the maximum number of items dropped by a single entity when killed with Looting III. Defaults to the same value as amountMax.
        * requires: if given, the item is only dropped under specific circumstances:
            * player: the entity must be killed by a player or tamed wolf.
            * chargedCreeper: the entity must be killed by a charged Creeper explosion. A single charged Creeper explosion will only ever produce one such item, no matter how many entities it kills.
            * whileUsing: the entity must be using (e.g. drinking) the item when it dies in order to drop it.
            * crash: the entity must die from collision damage.
            * noCrash: the entity must not die from collision damage.
            * whileWearing: the entity must have spawned wearing or holding the item, and must be killed by a player or tamed wolf. The presence of this obtaining method indicates that this can occur naturally. The item has a chance of 8.5% plus the level of looting used to kill the entity (11.5% with Looting III) to drop.
            * halloween: the entity must have spawned wearing or holding the item, and must be killed by a player or tamed wolf. The presence of this obtaining method indicates that this can occur naturally on Halloween. The item has a chance equivalent to the level of looting used to kill the entity (3% with Looting III) to drop.
        * subtype: the mob's subtype, as listed in mobs.json.
    * mining: the item is dropped when a block is mined.
        * block: an item stub specifying the block that drops the item.
        * amountMin: the minimum number of items dropped from a single block when mined without the Fortune enchantment. Defaults to 1.
        * amountMax: the maximum number of items dropped from a single block when mined without the Fortune enchantment. Defaults to 1.
        * amountMinFortune: the minimum number of items dropped from a single block when mined with Fortune III. Defaults to the same value as amountMin.
        * amountMaxFortune: the maximum number of items dropped from a single block when mined with Fortune III. Defaults to the same value as amountMax.
        * tools: an array of tool stubs describing the tools with which this method of obtaining works. A tool stub can be an item stub, or one of the special values below. Defaults to all tools.
            * null: without a tool, i.e. bare handed or with a non-tool block or item.
            * "hoe": any hoe.
            * "pickaxe": any pickaxe.
            * "shovel": any shovel.
        * excludeTools: if true, this method of obtaining works with tools other than those in the tools array. Defaults to false.
        * silkTouch: whether or not the Silk Touch enchantment should be used. The default, null, means that it works with or without Silk Touch.
    * structure: the block generates naturally as part of a structure.
        * amount: how many of the block will typically generate as part of a single structure. If not given, it varies.
        * structure: the structure ID as used in structures.json
    * trading: the item can be bought from a testificate.
        * profession: the villager type ID, determining their appearance. For example, 0 for farmers.
        * career: the villager subtype ID, determining their trades. For example, 2 for fishermen (profession 0) or weapon smiths (profession 3).
        * tier: the tier at which the trade is unlocked. Defaults to 0, meaning that the villager starts with this trade already unlocked.
        * price: an item stub specifying the maximum amount of items that must be sold, or a number if the price is in emeralds.
        * priceMin: an item stub specifying the minimum amount of items that must be sold, or a number if the price is in emeralds. Defaults to the same as the maximum price.
        * additionalPrice: an item stub specifying the maximum amount of items that must be sold in the second stack. Defaults to null, meaning no items.
        * additionalPriceMin: an item stub specifying the minimum amount of items that must be sold in the second stack. Defaults to the same as the maximum additional price.
        * outputAmount: the maximum number of items obtained by trading once. Defaults to 1.
        * outputAmountMin: the minimum number of items obtained by trading once. Defaults to the same value as outputAmount.
    * fishing: the item can be caught by fishing.
        * category: one of "fish", "treasure", or "junk".
        * weight: the chance that an item in this category will be this item, if known.
        * stackSize: the number of items fished at once. Defaults to 1.
    * brewing: the item can be brewed.
        * basePotion: an item stub describing the base potion from which this item is created.
        * ingredient: an item stub describing the additional brewing ingredient, or an array of item stubs describing multiple ingredients which can be used interchangeably.
    * bonusChest: the item may generate in the bonus chest, depending on the world seed.
        * amountMin: the minimum number of items in a single generated stack. Defaults to 1.
        * amountMax: the maximum number of items in a single generated stack. Defaults to 1.
        * stacksMin: the minimum number of total stacks generated in the bonus chest.
        * stacksMax: the maximum number of total stacks generated in the bonus chest.
        * weight: the chance that a generated stack will have this item, if known.
    * chest: the item may appear in chests or other inventories generated naturally with structures in the world.
        * amountMin: the minimum number of items in a single generated stack. Defaults to 1.
        * amountMax: the maximum number of items in a single generated stack. Defaults to 1.
        * structure: the structure inventory name as specified in structres.json
    * natural: the block generates naturally as part of the world.
        * biomes: an array of biome IDs (corresponding to the "id" field in biomes.json) where the block can generate. By default, it can generate in all biomes.
        * dimension: the dimension where the block generates: "overworld", "nether", or "end".
        * infinite: whether an infinite amount of the block will generate, limited only by the world size. Defaults to true.
    * plantGrowth: the block generates from a growing plant.
        * plant: an item stub specifying the required plant block. The item stub's "consumed" field specifies whether the original plant block is consumed by the growth event, and defaults to false instead.
        * amountMin: the minimum number of blocks that grow from one plant block in one growth event. Defaults to 1.
        * amountMax: the maximum number of blocks that grow from one plant block in one growth event. Defaults to the value of amountMin.
    * modifyBlock: the block can be created by using (default: right click) an item on another block.
        * block: an item stub describing the source block.
        * tools: an array of tool stubs describing the items which can be used for this. The "consumed" field defaults to false instead.
        * damage: how much damage the tool takes in the process if it has a durability value. Defaults to 1.
    * useItem: the item can be created by using (default: right click) another item.
        * item: an item stub describing the source item.
        * onBlock: an optional item stub. If given, the item must be used on this block. If the "consumed" field is true (defaults to false instead), the block is consumed and replaced with air.
        * onEntity: an optional entity savegame ID. If given, the item must be used on this entity.
    * liquids: the block is generated when two liquid blocks are arranged in a specific fashion.
        * liquid1: an item stub describing the first liquid block.
        * liquid2: an item stub describing the second liquid block.
        * relation: how the liquid blocks must be arranged for the block creation. May be one of the following:
            * flowIntoSource: created when the first liquid attempts to flow into a source block of the second, regardless of direction. The second liquid's source block is replaced by the new block.
    * special: a method of obtaining not described above.
        * description: a HTML description for All The Items.
        * block: if true, the method creates a block placed in the world. If false (the default), the method creates an item as a dropped item entity or within an inventory.
        * renewability: One of "finite", "infinite", "manual", "fullyAuto", describing the method's renewability as defined on http://wiki.wurstmineberg.de/Renewability
* dropsSelf: an array, or single entry. Each entry is either an object structured like “method of obtaining: mining” objects, except without the “block” key, or simply a tool stub. This is used to specify how the block must be mined so that it drops itself. The default is true, implying that the block always drops itself.
* whenPlaced: an item stub specifying the block this item turns into when placed.
* creativeMenu: whether the item appears in the Creative mode inventory menu. Defaults to true.
* pickBlock: whether the item can be obtained using the Pick Block key in Creative mode. Defaults to the same value as creativeMenu.
* durability: the durability of the tool, as displayed in-game.
* stackable: how many of this item, given that they are identical, may be stacked together. May be true or omitted for stackable (64), false for unstackable (1), or another positive integer for a custom value.
* alwaysGlow: whether the item always has a glowing effect, regardless of enchantments. Defaults to false.
